{
  "author": {
    "name": "Spencer Kelly",
    "email": "spencerwater@gmail.com",
    "url": "http://spencerwaterbed.com"
  },
  "name": "freebase",
  "description": "a very masculine way to work with data from freebase.com",
  "version": "2.1.14",
  "repository": {
    "type": "git",
    "url": "git://github.com/spencermountain/Freebase.js.git"
  },
  "main": "index.js",
  "engines": [
    "node >= 0.3.6"
  ],
  "bin": {
    "freebase": "./helpers/cli.js"
  },
  "dependencies": {
    "request": "*",
    "async": "*",
    "underscore": "*"
  },
  "devDependencies": {
    "grunt": "*",
    "grunt-contrib-jshint": "*",
    "grunt-contrib-concat": "*",
    "grunt-contrib-uglify": "*"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "node tests.js"
  },
  "readme": "[Freebase](http://freebase.com/) is a very masculine but complicated human-curated database.\n\n[Nodejs](http://nodejs.org/) is a straight-talkin language that takes no guff\n\n## Giddyup\n```javascript\n    npm install freebase\n```\n\nthen:\n```javascript\n    var freebase=require('freebase');\n    freebase.description('tom cruise', [options], [callback])\n    //\"Tom Cruise, is an American film actor..\"\n```\n## Showin' off\n\nit's built to be as flexible as possible. all methods can handle the same things:\n```javascript\n    freebase.sentence(\"/en/thom_yorke\")//freebase link\n    freebase.weblinks(\"thom yorke\")//search term\n    freebase.wikipedia_categories(\"http://www.myspace.com/thomyorkemusic\")//weblink\n    freebase.search({\"name\":\"thom yorke\", \"id\":\"/en/thom_yorke\"})//freebase object\n    freebase.notable([\"/en/radiohead\",\"thom yorke\"])//array of stuff\n```\nthis properly handles many asynchronous requests, rate-limiting them to 10-at-a-time.\n```javascript\n    freebase.images([\"johny greenwood\", \"thom yorke\", \"marvin gaye\"], {max:10}, console.log)\n```\nthis is pretty clever i'd say:\n```javascript\n    freebase.sentence(\"meatloaf\", {type:\"/food/food\"}, console.log)\n```\nand when you're hacking in the console:\n```shell\n$ freebase sentence \"thom yorke\"\n```\n\n## In the friggin broswer\n```javascript\n  <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/async/0.2.7/async.min.js\"></script>\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js\"></script>\n  <script src=\"https://dl.dropboxusercontent.com/s/0fvdus9v0hhnsfd/freebase.min.js\"></script>\n  <script>\n  $(document).ready(function(){\n    function show(r){\n      $('body').append(r)\n    }\n    $.freebase.sentence(\"tony hawk\",{},show)\n  })\n  </script>\n```\n\n## MQLwrite\n```shell\n  cd mqlwrite\n  npm install googleapis request\n```\nadd your client ID and Client Secret to the file\n```shell\n  node mqlwrite_example.js\n```\nthis will take you through the steps of authenticating and making a write to freebase.\n\n### Basic methods\n\n####MQLread API\nBooks about planets:\n```javascript\n    var query=[{\n                \"type\":  \"/astronomy/planet\",\n                \"name\":  null,\n                \"/book/book_subject/works\": []\n               }]​\n    freebase.mqlread(query, {}, function(r){console.log(r)})\n```\n\n####Pagination\nEvery Tornado, ever\n```javascript\n      query=[{\n              \"type\":\"/base/disaster2/tornado\",\n              \"name\":null\n             }]\n      freebase.paginate(query, {max:400}, console.log)\n```\n####Search API\nHockey players named 'doug'\n```javascript\n    freebase.search(\"doug\",{type: \"/ice_hockey/hockey_player\"}, console.log)\n```\n####Description API\nFirst paragraph of the wikipedia article:\n```javascript\n     freebase.description(\"mike myers\", {}, console.log)\n     freebase.description(\"http://myspace.com/u2\", {}, console.log)\n```\n####Topic API\nA nicely treated output of all of a topic's data:\n```javascript\n     freebase.topic(\"mike myers\", {}, console.log)\n     freebase.topic(\"http://myspace.com/u2\", {}, console.log)\n```\n####Notable-types\nThe most accurate, or notable type for a topic:\n```javascript\n     freebase.notable(\"canada\", {}, console.log)\n     -> {id:\"/location/country\", name:\"Country\"}\n```\n## Sugar\n####Grammar\nWhich pronoun, tense, article and gender to use for this topic\n```javascript\n    freebase.grammar(\"washing machine\", {}, console.log)\n       -> { plural: true,\n            gender: null,\n            article: 'a',\n            pronoun: 'they',\n            copula: 'are' }\n    freebase.grammar([\"prince harry\", \"miranda july\"], {}, console.log)\n       /* [ { plural: false,\n              gender: 'male',\n              article: 'a',\n              pronoun: 'he',\n              copula: 'is' },\n            { plural: false,\n              gender: 'female',\n              article: 'a',\n              pronoun: 'she',\n              copula: 'is' } ]\n            */\n```\n####Related Topics\nSimilar topics to this topic\n```javascript\n    freebase.related(\"toronto\", {}, function(r){\n        console.log(r.map(function(v){return v.name}))\n      })\n      -> /* Toronto FC\n          Toronto Maple Leafs\n          Toronto Argonauts\n          North York\n          Toronto Marlies*/\n```\n####Safe-Lookup\nA common-sense search that only matches when confident:\n```javascript\n    freebase.lookup(\"tom green\", {}, console.log)\n    freebase.lookup([\"toronto\",\"suddenly susan\"], {}, console.log)\n```\n####SameAs links\nsameAs weblinks for a topic, or url\n```javascript\n    freebase.same_as_links(\"toronto\", {}, console.log)\n    freebase.same_as_links(\"http://toronto.ca\", {}, console.log)\n```\n####First Sentence\nThe first sentence from a wikipedia article:\n```javascript\n    freebase.sentence(\"tokyo\", {}, console.log)\n```\n####Graph-analysis\nGraph-type queries on topics, dancing over tough values and mediators:\n```javascript\n      freebase.graph(\"ubuntu\", {}, console.log )\n      freebase.outgoing(\"ubuntu\", {}, console.log )\n      freebase.incoming(\"ubuntu\", {}, console.log )\n```\n####Schema-agnostic queries\nA list of topics in a 'is-a' type of collection:\n```javascript\n     freebase.list(\"earthquakes\", {}, console.log)\n```\n####Translation\nTranslated names for topics:\n```javascript\n     freebase.translate(\"radiohead\", {lang:\"/lang/ko\"}, console.log)\n     -> 라디오헤드\n```\n####Encoding\nEncode a string for inclusion in a freebase id/key/whatever\n```javascript\n    freebase.mql_encode(\"Aarno Yrjö-Koskinen\")\n    ->\"Aarno_Yrj$00F6-Koskinen\"\n```\n####Schema introspection\nFind-out relevant information for a type or property:\n```javascript\n     freebase.schema_introspection(\"politician\", {}, console.log)\n     ->/* { domain: { name: 'Government', id: '/government' },\n          is_compound_value: false,\n          is_commons: 'Published',\n          equivalent_topic: { name: 'Politician', id: '/en/politician' },\n          topic_count: 90971,\n          property_count: 0,\n          included_types: [ { name: 'Person', id: '/people/person' },\n                  { name: 'Topic', id: '/common/topic' } ],\n          ...*/\n```\n##Wikipedia\n\n####Wikipedia-page\nGet the wikipedia link for a topic\n```javascript\n     freebase.wikipedia_page(\"tony hawk\", {}, console.log)\n     ->// http://en.wikipedia/wiki/Tony_Hawk\n```\n####Wikipedia categories\nGet the wikipedia categories for this topic's article\n```javascript\n     freebase.wikipedia_categories(\"tony hawk\", {}, console.log)\n```\n####Wikipedia topic-links\nGet the freebase topics linked-to in this topic's wikipedia article\n```javascript\n     freebase.wikipedia_links(\"tony hawk\", {}, console.log)\n      -> /*[{ id: '/wikipedia/en/Baker_Skateboards',  name: 'Baker Skateboards' },\n          { id: '/wikipedia/en/Bam_Margera', name: 'Bam Margera' },\n          { id: '/wikipedia/en/Barting_Over', name: 'Barting Over' },\n          { id: '/wikipedia/en/Blink-182', name: 'Blink-182' },\n          ...*/\n```\n####Wikipedia external-links\nGet the webpages linked-to from this topic's article\n```javascript\n     freebase.wikipedia_external_links(\"tony hawk\", {}, console.log)\n      -> /*[{ url: 'http://skate.quiksilver.com/riders-detail/',\n            domain: 'skate.quiksilver.com' },\n          { url: 'http://skateboarding.transworld.net/1000095781/news/tony-hawk-on-theeve-trucks/',\n            domain: 'skateboarding.transworld.net' },\n            ...*/\n```\n##Geographical\n####Geolocation\n  Get the lat/lng for a topic\n```javascript\n    freebase.geolocation(\"calgary\", {}, console.log)\n    -> //{ latitude: 51.0544444444, longitude: -114.066944444 }\n```\n####Nearby\n  List topics near this geolocation\n```javascript\n    freebase.nearby(\"cn tower\", {type:\"/food/restaurant\"}, console.log)\n      -> /*[{id: '/en/sneaky_dees',\n           name: 'Sneaky Dee\\'s',\n          },\n          {id: '/en/keg_mansion',\n           name: 'Keg Mansion',\n          }\n          ...*/\n```\n####Inside\n  List topics inside of this location\n```javascript\n    freebase.inside(\"montreal\")\n```\n####Place-data\nFrom a geo-coordinate, find out its City, Province, Country, and timezone\n```javascript\n    freebase.place_data({lat:51.545414293637286,lng:-0.07589578628540039}, {}, console.log)\n```\n##Method-list\nFreebase.com nodejs-library\nhttps://github.com/spencermountain/Freebase-nodejs--\n\n* **mqlread**\n     -interface to freebase's mql api\n* **lookup_id**\n     -generic info for an id\n* **search**\n     -regular search api\n* **url_lookup**\n     -freebase search tuned for looking up a url\n* **lookup**\n     -freebase search with filters to ensure only a confident, unambiguous result\n* **get_id**\n     -like freebase.lookup but satisfied with an id\n* **topic**\n     -topic api\n* **paginate**\n     -get all of the results to your query\n* **description**\n     -get a text blurb from freebase\n* **image**\n     -get a url for image href of on this topic\n* **grammar**\n     -get the proper pronoun to use for a topic eg. he/she/they/it\n* **same_as_links**\n     -turns a url into a freebase topic and list its same:as links\n* **translate**\n     -return specific language title for a topic\n* **notable**\n     -get a topic's notable type\n* **sentence**\n     -get the first sentence of a topic description\n* **list**\n     -get a list of topics in a type\n* **place_data**\n     -from a geo-coordinate, get the town, province, country, and timezone for it\n* **incoming**\n     -get any incoming data to this topic, ignoring cvt types\n* **outgoing**\n     -return all outgoing links for a topic, traversing cvt types\n* **graph**\n     -return all outgoing and incoming links for a topic\n* **related**\n     -get similar topics to a topic\n* **is_a**\n     -get a list of identifiers for a topic\n* **property_lookup**\n     -lookup soft property matches, like 'birthday' vs 'date of birth'\n* **question**\n     -give a topic and a property, and get a list of results\n* **dig**\n     -transitive query on a specific property, maximum 3-ply\n* **gallery**\n     -list of topics with images\n* **wordnet**\n     -query wordnet via freebase\n* **transitive**\n     -do a transitive-query, like all rivers in canada, using freebase metaschema\n* **geolocation**\n     -lat/long for a topic\n* **nearby**\n     -list of topics nearby a location\n* **inside**\n     -list of topics inside a location\n* **wikipedia_page**\n     -get a url for wikipedia based on this topic\n* **dbpedia_page**\n     -get a url for dbpedia based on this topic\n* **wikipedia_categories**\n     -get the wikipedia categories for a topic\n* **wikipedia_links**\n     -outgoing links from this wikipedia page, converted to freebase ids\n* **wikipedia_external_links**\n     -outgoing links from this wikipedia page, converted to freebase ids\n* **property_introspection**\n     -common lookups for freebase property data\n* **schema**\n     -common lookups for types and properties\n* **drilldown**\n     -get insight into the breakdown of the topics in this type, by type and quality\n* **mql_encode**\n     -quote a unicode string to turn it into a valid mql /type/key/value\n* **category_list**\n     -get the freebase topics in a wikipedia category\n* **wikipedia_subcategories**\n     -find the subcategories of this wikipedia category\n* **rdf**\n     -RDF api\n* **wikipedia_to_freebase**\n     -turn a wikipedia title or url into a freebase topic\n* **add_widget**\n     -add a generic html view of a topic\n\n##Examples\n* freebase.mqlread([{id:\"/en/radiohead\",name:null}])\n* freebase.lookup_id('/en/radiohead')\n* freebase.search(\"bill murray\")\n* freebase.url_lookup(\"http://myspace.com/u2\")\n* freebase.lookup(\"pulp fiction\")\n* freebase.get_id(\"/en/radiohead\")\n* freebase.topic(\"toronto\", {filter:\"allproperties\"})\n* freebase.paginate([{\"type\":\"/astronomy/moon\",\"name\":null, limit:2}],{max:13})\n* freebase.description(\"tunisia\")\n* freebase.image('toronto',{type:\"/location/citytown\"})\n* freebase.grammar(\"toronto maple leafs\")\n* freebase.same_as_links(\"toronto maple leafs\")\n* freebase.translate(\"toronto maple leafs\", {lang:\"/lang/ja\"})\n* freebase.notable(\"toronto maple leafs\")\n* freebase.sentence('john malkovich',{},console.log)\n* freebase.list(\"hurricanes\",{}, function(r){console.log(r)})\n* freebase.place_data({lat:51.545414293637286,lng:-0.07589578628540039}, {}, console.log)\n* freebase.incoming(\"toronto\")\n* freebase.outgoing(\"vancouver\")\n* freebase.graph(\"shawshank redemption\")\n* freebase.related(\"toronto\", {}, function(r){console.log(JSON.stringify(r, null, 2));})\n* freebase.is_a(\"george clooney\")\n* freebase.property_lookup(\"albums\")\n* freebase.question(\"keanu reeves\", {property:\"children\"})\n* freebase.dig('/en/toronto', {property:'/location/location/contains'}, function(r){ console.log(r) })\n* freebase.gallery('hurricanes')\n* freebase.wordnet(\"charming\")\n* freebase.transitive(\"ontario\", {property:\"part_of\"}, function(r){ console.log(r)})\n* freebase.geolocation(\"cn tower\")\n* freebase.nearby(\"cn tower\", {type:\"/location/location\"}, console.log)\n* freebase.inside(\"montreal\")\n* freebase.wikipedia_page('toronto')\n* freebase.dbpedia_page('toronto')\n* freebase.wikipedia_categories(\"Tunisia\")\n* freebase.wikipedia_links(\"Toronto\", {}, console.log)\n* freebase.wikipedia_external_links(\"Toronto\", {}, console.log)\n* freebase.property_introspection(\"/government/politician/party\")\n* freebase.schema(\"politician\")\n* freebase.drilldown(\"/chemistry/chemical_compound\",{max:400},console.log)\n* freebase.category_list(\"Category:Redirects_from_plurals\")\n* freebase.wikipedia_subcategories(\"Category:Enzymes\",{depth:2},function(r){console.log(JSON.stringify(r))})\n* freebase.rdf(\"toronto\")\n* freebase.wikipedia_to_freebase(\"Tony Hawk\")\n* freebase.documentation()\n\n\n## poo\nCreative Commons, MIT\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/spencermountain/Freebase.js/issues"
  },
  "_id": "freebase@2.1.14",
  "dist": {
    "shasum": "f3f9431cf8c565534f3973db6b0fa9c1177e1452"
  },
  "_from": "freebase@",
  "_resolved": "https://registry.npmjs.org/freebase/-/freebase-2.1.14.tgz"
}
